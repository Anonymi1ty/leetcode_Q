"""
已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：
若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]
若旋转 7 次，则可以得到 [0,1,2,4,5,6,7]
注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。

给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。

你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。

 

示例 1：

输入：nums = [3,4,5,1,2]
输出：1
解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。

"""

# 思路：
    # 和33题类似，二分需要顺序数组，由于只按顺序旋转，任意时刻 [l, r] 内总有一边是单调有序的
    # 所以可以通过判断左半边有序还是右半边有序实现二分法
    
from typing import List

class Solution:
    def findMin(self, nums: List[int]) -> int:
        l, r = 0, len(nums) - 1
        res = float('inf')

        while l <= r:
            # 若当前区间整体有序，最小值就是左端点
            if nums[l] <= nums[r]:
                res = min(res, nums[l])
                break

            m = (l + r) // 2
            res = min(res, nums[m])

            if nums[l] <= nums[m]:
                # 左半有序 ⇒ 该半段的最小值是 nums[l]
                res = min(res, nums[l])
                l = m + 1          # 丢弃左半
            else:
                # 右半有序 ⇒ 该半段的最小值是 nums[m]
                r = m - 1          # 丢弃右半
        return res
