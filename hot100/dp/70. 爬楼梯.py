"""
设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

示例 1：

输入：n = 2
输出：2
解释：有两种方法可以爬到楼顶。
1. 1 阶 + 1 阶
2. 2 阶
示例 2：

输入：n = 3
输出：3
解释：有三种方法可以爬到楼顶。
1. 1 阶 + 1 阶 + 1 阶
2. 1 阶 + 2 阶
3. 2 阶 + 1 阶
"""

# 思路：
    #核心推导：
        # 当为 1 级台阶： 剩 n−1 个台阶，此情况共有 f(n−1) 种跳法。
        # 当为 2 级台阶： 剩 n−2 个台阶，此情况共有 f(n−2) 种跳法。
        # 即 f(n)=f(n−1)+f(n−2) ，以上递推性质为斐波那契数列
    # f(0) = 1, f(1) = 1, f(2) = 2
import heapq
from typing import List, Dict

class Solution:
    def climbStairs(self, n: int) -> int:
        if n < 2:
            return 1
        a,b = 1,1 # 分别表示 f(0)=1, f(1)=1
        for _ in range(2, n+1):
            a,b = b,(a+b) # b: f(n) = f(n -1) +f (n-2)
        return b # b即为f(n)