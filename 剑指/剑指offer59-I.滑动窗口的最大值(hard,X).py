"""
给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。

返回 滑动窗口中的最大值 。

 

示例 1：

输入：nums = [1,3,-1,-3,5,3,6,7], k = 3
输出：[3,3,5,5,6,7]
解释：
滑动窗口的位置                最大值
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
示例 2：

输入：nums = [1], k = 1
输出：[1]

1 <= nums.length <= 10^5
-10^4 <= nums[i] <= 10^4
1 <= k <= nums.length
"""

# 思考：考虑k的大小，滑动窗口内使用快排(时间复杂度达不到要求，会超时)

# 思路：
    # 维护一个单调递减的双端队列，其中存储的是 nums 数组的索引，而不是具体的值。这样，我们可以快速地获取当前窗口的最大值。（维护队列的左边界）
        # 保证队列单调递减：
        # 如果当前元素比队列尾部元素大，那么队列尾部元素不可能成为最大值（因为它们永远不会被选到），所以直接移除它们。
        # 队列的头部始终是当前窗口的最大值的索引，每次直接取 nums[deque[0]] 即可。
        # 保证索引在窗口范围内：
        # 每次滑动窗口时，如果队列头部的索引超出了窗口范围，就将其从队列中移除。

from collections import deque
from typing import List

class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        if not nums:
            return []

        res = []
        dq = deque()  # 维护一个单调递减的双端队列，存索引

        for i in range(len(nums)):
            # 1. 移除队列中已经不在当前窗口范围内的元素（索引超出窗口左边界）
            if dq and dq[0] < i - k + 1:
                dq.popleft()

            # 2. 维护单调递减队列，确保队列中存的索引对应的值是递减的
            while dq and nums[dq[-1]] < nums[i]:
                dq.pop()

            # 3. 将当前元素的索引加入队列
            dq.append(i)

            # 4. 记录最大值（窗口形成后，每次取 `dq` 头部索引对应的值）
            if i >= k - 1:
                res.append(nums[dq[0]])

        return res

        